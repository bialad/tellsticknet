#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-

from sys import argv, stdin, stderr, stdout
from json import (loads as load_json,
                  dumps as dump_json)
import logging
from yaml import safe_load as load_yaml

_LOGGER = logging.getLogger(__name__)
LOGFMT = "%(asctime)s %(levelname)5s (%(threadName)s) [%(name)s] %(message)s"
DATEFMT = "%y-%m-%d %H:%M.%S"

log_level = logging.INFO if '-v' in argv \
            else logging.DEBUG if '-vv' in argv \
                 else logging.ERROR

logging.basicConfig(level=log_level,
                    stream=stderr,
                    datefmt=DATEFMT,
                    format=LOGFMT)


def make_key(item):
    """Return a unique key for the switch/sensor."""
    FMT_SWITCH = '{class}/{protocol}/{model}/{unit}/{house}'
    FMT_SENSOR = '{class}/{protocol}/{model}/{sensorId}'
    template = FMT_SWITCH if 'unit' in item else FMT_SENSOR
    return template.format(**item)

with open('hass_map-sample.yaml') as f:
    entities={make_key(proto):dict(proto,
                                   entity=entity,
                                   key=make_key(proto))
              for entity,proto in load_yaml(f).items()}

for line in stdin:
    packet = load_json(line)
    key = make_key(packet)
    entity = entities.get(key)
    if entity:
        packet.update(entity)
        print(dump_json(packet))
        try:
            stdout.flush()
        except IOError:
            # broken pipe
            pass
    else:
        _LOGGER.warning('Skipping packet %s', packet)
