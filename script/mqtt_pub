#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-

from sys import stdin, stderr, argv
from json import (loads as load_json,
                  dumps as dump_json)
import logging
from os.path import join, dirname, expanduser
from os import environ as env
import paho.mqtt.client as mqtt
from requests import certs

_LOGGER = logging.getLogger(__name__)
LOGFMT = "%(asctime)s %(levelname)5s (%(threadName)s) [%(name)s] %(message)s"
DATEFMT = "%y-%m-%d %H:%M.%S"

log_level = logging.INFO if '-v' in argv \
            else logging.DEBUG if '-vv' in argv \
                 else logging.ERROR

logging.basicConfig(level=log_level,
                    stream=stderr,
                    datefmt=DATEFMT,
                    format=LOGFMT)


def read_credentials():
    with open(join(env.get('XDG_CONFIG_HOME',
                           join(expanduser('~'), '.config')),
                   'mosquitto_pub')) as f:
        d = dict(line.replace('-', '').split() for line in f.read().splitlines())
        return dict(host=d['h'],
                    port=d['p'],
                    username=d['username'],
                    password=d['pw'])


c = read_credentials()
       

def on_connect(client, userdata, flags, rc):
    _LOGGER.info('Connected')

    
def on_publish(client, userdata, mid):
    _LOGGER.info('Published')


def on_disconnect(client, userdata, rc):
    _LOGGER.warning('Disconnected')

    
client = mqtt.Client()
client.username_pw_set(username=c['username'],
                       password=c['password'])
client.tls_set(certs.where())

client.on_connect = on_connect
client.on_disconnect = on_disconnect
client.on_publish = on_publish
client.connect(host=c['host'],
               port=int(c['port']))

client.loop_start()

for line in stdin:
    packet = load_json(line)
    topic_dev = 'tellsticknet/events/dev/{key}'.format(**packet)
    topic_raw = 'tellsticknet/events/raw'
    topic_hass = 'tellsticknet/events/entity/{entity}'.format(**packet)
    payload = dump_json(packet)
    client.publish(topic_dev, payload) 
    client.publish(topic_raw, payload) 
    client.publish(topic_hass, payload)
    _LOGGER.debug('MQTT Sent packet')
